! function(d, h) {
    "function" == typeof define && define.amd ? define(["jquery"], h) : h("object" == typeof exports ? require("jquery") : d.jQuery)
}(this, function(d) {
    function h(a) {
        var b, c, e = {};
        var d = a.replace(/\s*:\s*/g, ":").replace(/\s*,\s*/g, ",").split(",");
        var g = 0;
        for (c = d.length; c > g && (b = d[g], -1 === b.search(/^(http|https|ftp):\/\//) && -1 !== b.search(":")); g++) {
            var f = b.indexOf(":");
            var h = b.substring(0, f);
            (f = b.substring(f + 1)) || (f = void 0);
            "string" == typeof f && (f = "true" === f || ("false" === f ? !1 : f));
            "string" == typeof f && (f = isNaN(f) ?
                f : +f);
            e[h] = f
        }
        return null == h && null == f ? a : e
    }

    function l(a) {
        var b = ("" + a).split(/\s+/),
            c = "50%",
            e = "50%";
        var d = 0;
        for (a = b.length; a > d; d++) {
            var g = b[d];
            "left" === g ? c = "0%" : "right" === g ? c = "100%" : "top" === g ? e = "0%" : "bottom" === g ? e = "100%" : "center" === g ? 0 === d ? c = "50%" : e = "50%" : 0 === d ? c = g : e = g
        }
        return {
            x: c,
            y: e
        }
    }

    function m(a, b) {
        var c = function() {
            b(this.src)
        };
        d('<img src="' + a + '.gif">').load(c);
        d('<img src="' + a + '.jpg">').load(c);
        d('<img src="' + a + '.jpeg">').load(c);
        d('<img src="' + a + '.png">').load(c)
    }

    function k(a, b, c) {
        if (this.$element =
            d(a), "string" == typeof b && (b = h(b)), c ? "string" == typeof c && (c = h(c)) : c = {}, "string" == typeof b) b = b.replace(/\.\w*$/, "");
        else if ("object" == typeof b)
            for (var e in b) b.hasOwnProperty(e) && (b[e] = b[e].replace(/\.\w*$/, ""));
        this.settings = d.extend({}, n, c);
        this.path = b;
        this.init()
    }
    var n = {
        volume: 1,
        playbackRate: 1,
        muted: !0,
        loop: !0,
        autoplay: !0,
        position: "50% 50%",
        posterType: "detect",
        resizing: !0
    };
    k.prototype.init = function() {
        var a = this,
            b = l(a.settings.position),
            c = "";
        a.$wrapper = d("<div>").css({
            position: "absolute",
            "z-index": -1,
            top: 0,
            left: 0,
            bottom: 0,
            right: 0,
            overflow: "hidden",
            "-webkit-background-size": "cover",
            "-moz-background-size": "cover",
            "-o-background-size": "cover",
            "background-size": "cover",
            "background-repeat": "no-repeat",
            "background-position": b.x + " " + b.y
        });
        var e = a.path;
        "object" == typeof a.path && (a.path.poster ? e = a.path.poster : a.path.mp4 ? e = a.path.mp4 : a.path.webm ? e = a.path.webm : a.path.ogv && (e = a.path.ogv));
        "detect" === a.settings.posterType ? m(e, function(b) {
                a.$wrapper.css("background-image", "url(" + b + ")")
            }) : "none" !== a.settings.posterType &&
            a.$wrapper.css("background-image", "url(" + e + "." + a.settings.posterType + ")");
        "static" === a.$element.css("position") && a.$element.css("position", "relative");
        a.$element.prepend(a.$wrapper);
        "object" == typeof a.path ? (a.path.mp4 && (c += '<source src="' + a.path.mp4 + '.mp4" type="video/mp4">'), a.path.webm && (c += '<source src="' + a.path.webm + '.webm" type="video/webm">'), a.path.ogv && (c += '<source src="' + a.path.ogv + '.ogv" type="video/ogv">'), a.$video = d("<video>" + c + "</video>")) : a.$video = d('<video><source src="' + a.path + '.mp4" type="video/mp4"><source src="' +
            a.path + '.webm" type="video/webm"><source src="' + a.path + '.ogv" type="video/ogg"></video>');
        a.$video.prop({
            autoplay: a.settings.autoplay,
            loop: a.settings.loop,
            volume: a.settings.volume,
            muted: a.settings.muted,
            defaultMuted: a.settings.muted,
            playbackRate: a.settings.playbackRate,
            defaultPlaybackRate: a.settings.playbackRate
        }).css({
            margin: "auto",
            position: "absolute",
            "z-index": -1,
            top: b.y,
            left: b.x,
            "-webkit-transform": "translate(-" + b.x + ", -" + b.y + ")",
            "-ms-transform": "translate(-" + b.x + ", -" + b.y + ")",
            "-moz-transform": "translate(-" +
                b.x + ", -" + b.y + ")",
            transform: "translate(-" + b.x + ", -" + b.y + ")",
            visibility: "hidden"
        }).one("canplaythrough.vide", function() {
            a.resize()
        }).one("playing.vide", function() {
            a.$video.css("visibility", "visible");
            a.$wrapper.css("background-image", "none")
        });
        a.$element.on("resize.vide", function() {
            a.settings.resizing && a.resize()
        });
        a.$wrapper.append(a.$video)
    };
    k.prototype.getVideoObject = function() {
        return this.$video[0]
    };
    k.prototype.resize = function() {
        if (this.$video) {
            var a = this.$video[0].videoHeight,
                b = this.$video[0].videoWidth,
                c = this.$wrapper.height(),
                d = this.$wrapper.width();
            this.$video.css(d / b > c / a ? {
                width: d + 2,
                height: "auto"
            } : {
                width: "auto",
                height: c + 2
            })
        }
    };
    k.prototype.destroy = function() {
        this.$element.off("vide");
        this.$video && this.$video.off("vide");
        delete d.vide.lookup[this.index];
        this.$element.removeData("vide");
        this.$wrapper.remove()
    };
    d.vide = {
        lookup: []
    };
    d.fn.vide = function(a, b) {
        var c;
        return this.each(function() {
            (c = d.data(this, "vide")) && c.destroy();
            c = new k(this, a, b);
            c.index = d.vide.lookup.push(c) - 1;
            d.data(this, "vide", c)
        }), this
    };
    d(document).ready(function() {
        var a = d(window);
        a.on("resize.vide", function() {
            for (var a, c = d.vide.lookup.length, e = 0; c > e; e++)(a = d.vide.lookup[e]) && a.settings.resizing && a.resize()
        });
        a.on("unload.vide", function() {
            return !1
        });
        d(document).find("[data-vide-bg]").each(function(a, c) {
            var b = d(c),
                h = b.data("vide-options"),
                g = b.data("vide-bg");
            b.vide(g, h)
        })
    })
});